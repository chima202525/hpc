#include<iostream>
#include<queue>
#include<stdlib.h>
#include<omp.h>

using namespace std;

class node {
public:
    node *left;
    node *right;
    int data;
};

class BFS {
public:
    node* insert(node*, int);
    void BFS_Function(node*);
};

node* BFS::insert(node* root, int data) 
{
    if (root == NULL) {
        root = new node;
        root->data = data;
        root->left = root->right = NULL;
        return root;
    }

    if (data < root->data)
        root->left = insert(root->left, data);
    else
        root->right = insert(root->right, data);
    return root;
}

void BFS::BFS_Function(node* head)
{
    if (head == NULL) return;

    queue<node*> q;
    q.push(head);

    while (!q.empty())
    {
        int qsize = q.size();
        #pragma omp parallel for
        for (int i = 0; i < qsize; i++)
        {
            node* currNode;

            #pragma omp critical
            {
                currNode = q.front();
                q.pop();
                cout << "\t" << currNode->data;
            }

            #pragma omp critical
            {
                if (currNode->left) {
                    q.push(currNode->left);
                }
                if (currNode->right) {
                    q.push(currNode->right);
                }
            }
        }
    }
}

int main()
{
    BFS tree;
    node* root = NULL;
    int num, n;

    cout << "How many Nodes: ";
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        cout << "Enter the code " << (i + 1) << ": ";
        cin >> num;

        root = tree.insert(root, num);
    }

    double start = omp_get_wtime();
    tree.BFS_Function(root);
    double end = omp_get_wtime();

    cout << "\nExecution Time: " << (end - start) << " seconds\n";
}

